DataManager - класс-прослойка между логикой системы контроля версий и файловой системой. Умеет создавать всякие служебные папки, сохранять в них копии файлов, служебную информацию; очищать рабочую копию, откатываться к заданной версии.

LiteVCS - основной класс, с которым будет работать пользователь библиотеки. Описывает логику работы. Большинство методов реализуют какую-то конкретную команду из списка ниже. Активно взаимодействует с DataManager.

Algorithms - класс со статическими методами реализующими алгоритм поиска LCA с помощью двоичных подъёмов. Также может найти всех предков заданной версии. Активно взаимодействует с VersionNode, DataManager-ом и больше ни с чем.

ConsoleWorker - консольное приложение, которое парсит команду и вызывает метод LiteVCS с нужными аргументами.

Примитивные классы:
ContentDescriptor хранит мапу из относительных путей в id версий фйалов. По id ContentDescriptor-а можно днлать checkout. Также используется для хранения Stage - списка версий файлов, которые надо добавить к следующему коммиту.

Commit хранит имя автора коммита, время его создания, комментарий к коммиту и id ContentDescriptor-а который задаёт состояние файлов в репозитории. 

VersionNode хранит id коммита, с которым она ассоциирована, а также таблицу предков и глубину в дереве версий, используемых алгоритмом двоичного подъёма. Отделён от Commit чтобы облегчить VersionNode, которые будут в большом количестве читаться в процессе поиска общего предка. 

Branch хранит id VersionNode, которая считается полседней версией этой ветки. Также ветка имеет имя.

Header хранит имя последнего указанного автора (через hello) (это имя подставляется в создаваемые коммиты) и имя активной ветки.

Stage хранит информацию об изменениях, которые войдут в следующий коммит.




Список команд:
  init                                - Инициализирует репозиторий в текущей папке
  add [файл]                          - Сохраняет копию текущего состояния файла, чтобы добавить его к ближайшему коммиту
  commit [сообщение]                  - Делает коммит в текущую ветку, тем самым подтверждая все изменения
  checkout [id of content descriptor] - id можно узнать через logs или подсмотрев в папку .liteVCS/descriptors. 
                                        очищает рабочую папку, а затем подгружает прописанные в дескрипторе файлы.
  clean                               - Очищает рабочую папку, удаляя всё, кроме папки .liteVCS и файлов, входивших в последний коммит или изменения которых уже добавлены в Stage
  status                              - Показывает изменения, находящиеся в Stage, для каждого файла из рабочей папки сообщает статус (CHANGED - файл отличается от версии в последнем коммите и в Stage-е; NOT_CHANGED; UNKNOWN - не отслеживается репозиторием), а также перечисляет файлы, которые из папки пропали, но не были удалены через репозиторий. 
  create_branch [название]            - Создёт новую ветку, ответвляющуюся от головы текущей ветки
  remove_branch [название]            - Удаляет ветку
  switch_branch [название]            - Переключается на другую ветку. Предварительно необходимо закоммитить все накопленные изменения.
  merge_branch [название] [сообщение] - Если нет неразрешимых конфликтов (один и тот же файл изменили по разному в разных ветках), то
                                        добавляет изменения из указанной ветки в текущую, создавая коммит с указанным сообщением.
  reset [файл]                        - Откатывает состояние файла к последнему коммиту. Удаляет иформацию об изменении этого файла из Stage
  uninstall                           - Удаляет репозиторий
  logs [число]                        - Показывает последние [число] коммитов в текующей ветке
  hello [имя]                         - Задаёт имя пользователя.
  remove [файл]                       - Удаляет файл из рабочей папки, записывает в Stage информацию о том, что в следующем коммите надо этот файл перестать отслеживать
  
  
  
